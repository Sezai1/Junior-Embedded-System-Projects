
UART_CRC16_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002938  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad8  08002ad8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ae0  08002ae0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000080  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000008c  2000008c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ac4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f3  00000000  00000000  00028b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  0002a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000648  00000000  00000000  0002a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020391  00000000  00000000  0002af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008ebd  00000000  00000000  0004b2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c277d  00000000  00000000  0005415e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001168db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a94  00000000  00000000  0011692c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002aa8 	.word	0x08002aa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002aa8 	.word	0x08002aa8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <crc_calculation>:
#include "crc_calculation.h" // crc_calculation fonksiyonunun prototipini içeren başlık dosyası
#include <stdio.h>           // Standart girdi/çıktı işlemleri için standart kütüphane

// CRC hesaplama fonksiyonu
uint16_t crc_calculation(const unsigned char* data, size_t length) {
 80004cc:	b480      	push	{r7}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
    uint16_t CRC_poly = 0xA001;       // CRC algoritmasında kullanılan polinom değeri
 80004d6:	f24a 0301 	movw	r3, #40961	; 0xa001
 80004da:	817b      	strh	r3, [r7, #10]
    uint16_t crc_value = 0xFFFF;      // CRC'nin başlangıç değeri, tüm bitleri 1 olan bir 16-bit sayı
 80004dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e0:	82fb      	strh	r3, [r7, #22]

    // Verinin her baytı için döngü
    for (size_t i = 0; i < length; i++) {
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	e022      	b.n	800052e <crc_calculation+0x62>
        crc_value ^= data[i];         // CRC değerini verinin bu baytı ile XOR'la
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	8afb      	ldrh	r3, [r7, #22]
 80004f4:	4053      	eors	r3, r2
 80004f6:	82fb      	strh	r3, [r7, #22]

        // Bu baytın her biti için döngü
        for (int bit = 0; bit < 8; bit++) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e011      	b.n	8000522 <crc_calculation+0x56>
            if (crc_value & 0x0001) {       // CRC'nin en düşük biti 1 mi?
 80004fe:	8afb      	ldrh	r3, [r7, #22]
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	2b00      	cmp	r3, #0
 8000506:	d006      	beq.n	8000516 <crc_calculation+0x4a>
                crc_value = (crc_value >> 1) ^ CRC_poly; // Eğer öyleyse, sağa kaydır ve polinom ile XOR yap
 8000508:	8afb      	ldrh	r3, [r7, #22]
 800050a:	085b      	lsrs	r3, r3, #1
 800050c:	b29a      	uxth	r2, r3
 800050e:	897b      	ldrh	r3, [r7, #10]
 8000510:	4053      	eors	r3, r2
 8000512:	82fb      	strh	r3, [r7, #22]
 8000514:	e002      	b.n	800051c <crc_calculation+0x50>
            } else {
                crc_value >>= 1;           // Eğer değilse, sadece sağa kaydır
 8000516:	8afb      	ldrh	r3, [r7, #22]
 8000518:	085b      	lsrs	r3, r3, #1
 800051a:	82fb      	strh	r3, [r7, #22]
        for (int bit = 0; bit < 8; bit++) {
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	2b07      	cmp	r3, #7
 8000526:	ddea      	ble.n	80004fe <crc_calculation+0x32>
    for (size_t i = 0; i < length; i++) {
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	3301      	adds	r3, #1
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	429a      	cmp	r2, r3
 8000534:	d3d8      	bcc.n	80004e8 <crc_calculation+0x1c>
            }
        }
    }
    return crc_value & 0xFFFF; // CRC'yi 16 bit sınırında tut ve döndür
 8000536:	8afb      	ldrh	r3, [r7, #22]
}
 8000538:	4618      	mov	r0, r3
 800053a:	371c      	adds	r7, #28
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <crc_control>:

// CRC kontrol fonksiyonu
void crc_control(uint16_t crc_modbus, uint16_t crc_cal)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	80fb      	strh	r3, [r7, #6]
 8000550:	4613      	mov	r3, r2
 8000552:	80bb      	strh	r3, [r7, #4]
    if (crc_cal == crc_modbus) {       // Hesaplanan CRC ile verilen CRC eşleşiyor mu?
 8000554:	88ba      	ldrh	r2, [r7, #4]
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	429a      	cmp	r2, r3
 800055a:	d112      	bne.n	8000582 <crc_control+0x3e>
        HAL_Delay(200);                // Eşleşiyorsa 200 ms bekle
 800055c:	20c8      	movs	r0, #200	; 0xc8
 800055e:	f000 fae9 	bl	8000b34 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // LED'i aç (GPIOD üzerindeki 12. pin)
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000568:	480b      	ldr	r0, [pc, #44]	; (8000598 <crc_control+0x54>)
 800056a:	f000 fe47 	bl	80011fc <HAL_GPIO_WritePin>
        HAL_Delay(100);                // LED yanık durumda 100 ms bekle
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fae0 	bl	8000b34 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // LED'i kapat
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <crc_control+0x54>)
 800057c:	f000 fe3e 	bl	80011fc <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // Eşleşmiyorsa LED'i kapalı tut
    }
}
 8000580:	e005      	b.n	800058e <crc_control+0x4a>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // Eşleşmiyorsa LED'i kapalı tut
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <crc_control+0x54>)
 800058a:	f000 fe37 	bl	80011fc <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00

0800059c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	for(i=0; i<sizeof(data); i++)
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <HAL_UART_RxCpltCallback+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	e00f      	b.n	80005cc <HAL_UART_RxCpltCallback+0x30>
	{
		data[i]= rx_data[i];
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_UART_RxCpltCallback+0x74>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <HAL_UART_RxCpltCallback+0x74>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_UART_RxCpltCallback+0x78>)
 80005ba:	5c59      	ldrb	r1, [r3, r1]
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_UART_RxCpltCallback+0x7c>)
 80005be:	5499      	strb	r1, [r3, r2]
	for(i=0; i<sizeof(data); i++)
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <HAL_UART_RxCpltCallback+0x74>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <HAL_UART_RxCpltCallback+0x74>)
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_UART_RxCpltCallback+0x74>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b09      	cmp	r3, #9
 80005d2:	d9eb      	bls.n	80005ac <HAL_UART_RxCpltCallback+0x10>
	}
	  // datag degerini son 2 bayta ekliyoruz
    crc_modbus = (rx_data[10] << 8) | rx_data[11];
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_UART_RxCpltCallback+0x78>)
 80005d6:	7a9b      	ldrb	r3, [r3, #10]
 80005d8:	021b      	lsls	r3, r3, #8
 80005da:	b21a      	sxth	r2, r3
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <HAL_UART_RxCpltCallback+0x78>)
 80005de:	7adb      	ldrb	r3, [r3, #11]
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_UART_RxCpltCallback+0x80>)
 80005ea:	801a      	strh	r2, [r3, #0]

	crc_cal = crc_calculation(data, sizeof(data));
 80005ec:	210a      	movs	r1, #10
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <HAL_UART_RxCpltCallback+0x7c>)
 80005f0:	f7ff ff6c 	bl	80004cc <crc_calculation>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_UART_RxCpltCallback+0x84>)
 80005fa:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart5, (uint8_t*) rx_data, sizeof(rx_data));
 80005fc:	220c      	movs	r2, #12
 80005fe:	4905      	ldr	r1, [pc, #20]	; (8000614 <HAL_UART_RxCpltCallback+0x78>)
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <HAL_UART_RxCpltCallback+0x88>)
 8000602:	f001 fafa 	bl	8001bfa <HAL_UART_Receive_IT>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000086 	.word	0x20000086
 8000614:	2000006c 	.word	0x2000006c
 8000618:	20000078 	.word	0x20000078
 800061c:	20000082 	.word	0x20000082
 8000620:	20000084 	.word	0x20000084
 8000624:	20000028 	.word	0x20000028

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fa10 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f81a 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f89e 	bl	8000774 <MX_GPIO_Init>
  MX_UART5_Init();
 8000638:	f000 f872 	bl	8000720 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart5, (uint8_t*)rx_data, sizeof(rx_data));
 800063c:	220c      	movs	r2, #12
 800063e:	4906      	ldr	r1, [pc, #24]	; (8000658 <main+0x30>)
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <main+0x34>)
 8000642:	f001 fada 	bl	8001bfa <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  crc_control(crc_modbus, crc_cal);
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <main+0x38>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <main+0x3c>)
 800064c:	8812      	ldrh	r2, [r2, #0]
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff77 	bl	8000544 <crc_control>
 8000656:	e7f6      	b.n	8000646 <main+0x1e>
 8000658:	2000006c 	.word	0x2000006c
 800065c:	20000028 	.word	0x20000028
 8000660:	20000082 	.word	0x20000082
 8000664:	20000084 	.word	0x20000084

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fa0e 	bl	8002a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <SystemClock_Config+0xb0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a20      	ldr	r2, [pc, #128]	; (8000718 <SystemClock_Config+0xb0>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <SystemClock_Config+0xb0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <SystemClock_Config+0xb4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a1a      	ldr	r2, [pc, #104]	; (800071c <SystemClock_Config+0xb4>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <SystemClock_Config+0xb4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fdaa 	bl	8001230 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006e2:	f000 f8a7 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006ea:	2301      	movs	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f80d 	bl	8001720 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800070c:	f000 f892 	bl	8000834 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	; 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_UART5_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_UART5_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_UART5_Init+0x4c>)
 800072c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000730:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_UART5_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_UART5_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_UART5_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_UART5_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_UART5_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_UART5_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_UART5_Init+0x4c>)
 8000758:	f001 fa02 	bl	8001b60 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f867 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000028 	.word	0x20000028
 8000770:	40005000 	.word	0x40005000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b27      	ldr	r3, [pc, #156]	; (800082c <MX_GPIO_Init+0xb8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a26      	ldr	r2, [pc, #152]	; (800082c <MX_GPIO_Init+0xb8>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_GPIO_Init+0xb8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_GPIO_Init+0xb8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1f      	ldr	r2, [pc, #124]	; (800082c <MX_GPIO_Init+0xb8>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_GPIO_Init+0xb8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_GPIO_Init+0xb8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <MX_GPIO_Init+0xb8>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_GPIO_Init+0xb8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_GPIO_Init+0xb8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <MX_GPIO_Init+0xb8>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_GPIO_Init+0xb8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <MX_GPIO_Init+0xbc>)
 8000802:	f000 fcfb 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000806:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_GPIO_Init+0xbc>)
 8000820:	f000 fb50 	bl	8000ec4 <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020c00 	.word	0x40020c00

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_MspInit+0x4c>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <HAL_UART_MspInit+0xd0>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d152      	bne.n	8000958 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <HAL_UART_MspInit+0xd4>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a2a      	ldr	r2, [pc, #168]	; (8000964 <HAL_UART_MspInit+0xd4>)
 80008bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <HAL_UART_MspInit+0xd4>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <HAL_UART_MspInit+0xd4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <HAL_UART_MspInit+0xd4>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <HAL_UART_MspInit+0xd4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <HAL_UART_MspInit+0xd4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <HAL_UART_MspInit+0xd4>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <HAL_UART_MspInit+0xd4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000918:	2308      	movs	r3, #8
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4811      	ldr	r0, [pc, #68]	; (8000968 <HAL_UART_MspInit+0xd8>)
 8000924:	f000 face 	bl	8000ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000928:	2304      	movs	r3, #4
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000938:	2308      	movs	r3, #8
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	480a      	ldr	r0, [pc, #40]	; (800096c <HAL_UART_MspInit+0xdc>)
 8000944:	f000 fabe 	bl	8000ec4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	2035      	movs	r0, #53	; 0x35
 800094e:	f000 f9f0 	bl	8000d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000952:	2035      	movs	r0, #53	; 0x35
 8000954:	f000 fa09 	bl	8000d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40005000 	.word	0x40005000
 8000964:	40023800 	.word	0x40023800
 8000968:	40020800 	.word	0x40020800
 800096c:	40020c00 	.word	0x40020c00

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f89a 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <UART5_IRQHandler+0x10>)
 80009ca:	f001 f947 	bl	8001c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000028 	.word	0x20000028

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a18:	4c0b      	ldr	r4, [pc, #44]	; (8000a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a26:	f7ff ffd7 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f002 f811 	bl	8002a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fdfb 	bl	8000628 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a40:	08002ae8 	.word	0x08002ae8
  ldr r2, =_sbss
 8000a44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a48:	2000008c 	.word	0x2000008c

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f94f 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff fedc 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f967 	bl	8000d86 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f92f 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000088 	.word	0x20000088

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000088 	.word	0x20000088

08000b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff ffee 	bl	8000b1c <HAL_GetTick>
 8000b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d005      	beq.n	8000b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_Delay+0x44>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5a:	bf00      	nop
 8000b5c:	f7ff ffde 	bl	8000b1c <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8f7      	bhi.n	8000b5c <HAL_Delay+0x28>
  {
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff29 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff3e 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff8e 	bl	8000c70 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff31 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffa2 	bl	8000cd8 <SysTick_Config>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff feb6 	bl	8000b1c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d008      	beq.n	8000dd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e052      	b.n	8000e76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0216 	bic.w	r2, r2, #22
 8000dde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d103      	bne.n	8000e00 <HAL_DMA_Abort+0x62>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d007      	beq.n	8000e10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0208 	bic.w	r2, r2, #8
 8000e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0201 	bic.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e20:	e013      	b.n	8000e4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e22:	f7ff fe7b 	bl	8000b1c <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d90c      	bls.n	8000e4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2220      	movs	r2, #32
 8000e34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e015      	b.n	8000e76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1e4      	bne.n	8000e22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e5c:	223f      	movs	r2, #63	; 0x3f
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d004      	beq.n	8000e9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e00c      	b.n	8000eb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2205      	movs	r2, #5
 8000ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0201 	bic.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e16b      	b.n	80011b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 815a 	bne.w	80011b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d005      	beq.n	8000f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d130      	bne.n	8000f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d017      	beq.n	8000fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80b4 	beq.w	80011b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <HAL_GPIO_Init+0x30c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a5f      	ldr	r2, [pc, #380]	; (80011d0 <HAL_GPIO_Init+0x30c>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b5d      	ldr	r3, [pc, #372]	; (80011d0 <HAL_GPIO_Init+0x30c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a5b      	ldr	r2, [pc, #364]	; (80011d4 <HAL_GPIO_Init+0x310>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a52      	ldr	r2, [pc, #328]	; (80011d8 <HAL_GPIO_Init+0x314>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d02b      	beq.n	80010ea <HAL_GPIO_Init+0x226>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a51      	ldr	r2, [pc, #324]	; (80011dc <HAL_GPIO_Init+0x318>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x222>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a50      	ldr	r2, [pc, #320]	; (80011e0 <HAL_GPIO_Init+0x31c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x21e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <HAL_GPIO_Init+0x320>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x21a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_GPIO_Init+0x324>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x216>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4d      	ldr	r2, [pc, #308]	; (80011ec <HAL_GPIO_Init+0x328>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x212>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <HAL_GPIO_Init+0x32c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x20e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_GPIO_Init+0x330>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x20a>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e00e      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010ce:	2308      	movs	r3, #8
 80010d0:	e00c      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010d2:	2306      	movs	r3, #6
 80010d4:	e00a      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010d6:	2305      	movs	r3, #5
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010da:	2304      	movs	r3, #4
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010de:	2303      	movs	r3, #3
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010ea:	2300      	movs	r3, #0
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010fc:	4935      	ldr	r1, [pc, #212]	; (80011d4 <HAL_GPIO_Init+0x310>)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_GPIO_Init+0x334>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <HAL_GPIO_Init+0x334>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <HAL_GPIO_Init+0x334>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <HAL_GPIO_Init+0x334>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_GPIO_Init+0x334>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001182:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_GPIO_Init+0x334>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_GPIO_Init+0x334>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <HAL_GPIO_Init+0x334>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	f67f ae90 	bls.w	8000ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40021400 	.word	0x40021400
 80011f0:	40021800 	.word	0x40021800
 80011f4:	40021c00 	.word	0x40021c00
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e267      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d075      	beq.n	800133a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124e:	4b88      	ldr	r3, [pc, #544]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d00c      	beq.n	8001274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4b85      	ldr	r3, [pc, #532]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	2b08      	cmp	r3, #8
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b82      	ldr	r3, [pc, #520]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d05b      	beq.n	8001338 <HAL_RCC_OscConfig+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d157      	bne.n	8001338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e242      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x74>
 8001296:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a75      	ldr	r2, [pc, #468]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x98>
 80012ae:	4b70      	ldr	r3, [pc, #448]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6f      	ldr	r2, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b6d      	ldr	r3, [pc, #436]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6c      	ldr	r2, [pc, #432]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012c8:	4b69      	ldr	r3, [pc, #420]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a68      	ldr	r2, [pc, #416]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b66      	ldr	r3, [pc, #408]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a65      	ldr	r2, [pc, #404]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc18 	bl	8000b1c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc14 	bl	8000b1c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e207      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xc0>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fc04 	bl	8000b1c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fc00 	bl	8000b1c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1f3      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b51      	ldr	r3, [pc, #324]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0xe8>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d063      	beq.n	800140e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b44      	ldr	r3, [pc, #272]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1c7      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4937      	ldr	r1, [pc, #220]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e03a      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_RCC_OscConfig+0x244>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fbb9 	bl	8000b1c <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fbb5 	bl	8000b1c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a8      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4925      	ldr	r1, [pc, #148]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_OscConfig+0x244>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb98 	bl	8000b1c <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fb94 	bl	8000b1c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e187      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d036      	beq.n	8001488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x248>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fb78 	bl	8000b1c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fb74 	bl	8000b1c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e167      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x200>
 800144e:	e01b      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x248>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fb61 	bl	8000b1c <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	e00e      	b.n	800147c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fb5d 	bl	8000b1c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d907      	bls.n	800147c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e150      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 8001470:	40023800 	.word	0x40023800
 8001474:	42470000 	.word	0x42470000
 8001478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ea      	bne.n	800145e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8097 	beq.w	80015c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a7c      	ldr	r2, [pc, #496]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b77      	ldr	r3, [pc, #476]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d2:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a73      	ldr	r2, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fb1d 	bl	8000b1c <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fb19 	bl	8000b1c <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e10c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x2ea>
 800150c:	4b64      	ldr	r3, [pc, #400]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a63      	ldr	r2, [pc, #396]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x30c>
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a5e      	ldr	r2, [pc, #376]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a5b      	ldr	r2, [pc, #364]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800153c:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0304 	bic.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d015      	beq.n	8001588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fade 	bl	8000b1c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fada 	bl	8000b1c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0cb      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0ee      	beq.n	8001564 <HAL_RCC_OscConfig+0x334>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fac8 	bl	8000b1c <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f7ff fac4 	bl	8000b1c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e0b5      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ee      	bne.n	8001590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a38      	ldr	r2, [pc, #224]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a1 	beq.w	8001710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d05c      	beq.n	8001694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d141      	bne.n	8001666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fa98 	bl	8000b1c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fa94 	bl	8000b1c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e087      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	3b01      	subs	r3, #1
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	491b      	ldr	r1, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fa6d 	bl	8000b1c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fa69 	bl	8000b1c <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e05c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x416>
 8001664:	e054      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fa56 	bl	8000b1c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fa52 	bl	8000b1c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e045      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x444>
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e038      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40007000 	.word	0x40007000
 80016a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d028      	beq.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d121      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d11a      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d111      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	3b01      	subs	r3, #1
 80016f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cc      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d90c      	bls.n	800175c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d044      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e067      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4934      	ldr	r1, [pc, #208]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff f984 	bl	8000b1c <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff f980 	bl	8000b1c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e04f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d20c      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f8e4 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	08002ac0 	.word	0x08002ac0
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f0:	b094      	sub	sp, #80	; 0x50
 80018f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
 80018f8:	2300      	movs	r3, #0
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018fc:	2300      	movs	r3, #0
 80018fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001904:	4b79      	ldr	r3, [pc, #484]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d00d      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x40>
 8001910:	2b08      	cmp	r3, #8
 8001912:	f200 80e1 	bhi.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x34>
 800191a:	2b04      	cmp	r3, #4
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x3a>
 800191e:	e0db      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001924:	e0db      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001926:	4b73      	ldr	r3, [pc, #460]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800192a:	e0d8      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	2200      	movs	r2, #0
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
 800194c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800194e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
 800195a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800195e:	4622      	mov	r2, r4
 8001960:	462b      	mov	r3, r5
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	0159      	lsls	r1, r3, #5
 800196c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001970:	0150      	lsls	r0, r2, #5
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4621      	mov	r1, r4
 8001978:	1a51      	subs	r1, r2, r1
 800197a:	6139      	str	r1, [r7, #16]
 800197c:	4629      	mov	r1, r5
 800197e:	eb63 0301 	sbc.w	r3, r3, r1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001990:	4659      	mov	r1, fp
 8001992:	018b      	lsls	r3, r1, #6
 8001994:	4651      	mov	r1, sl
 8001996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199a:	4651      	mov	r1, sl
 800199c:	018a      	lsls	r2, r1, #6
 800199e:	4651      	mov	r1, sl
 80019a0:	ebb2 0801 	subs.w	r8, r2, r1
 80019a4:	4659      	mov	r1, fp
 80019a6:	eb63 0901 	sbc.w	r9, r3, r1
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019be:	4690      	mov	r8, r2
 80019c0:	4699      	mov	r9, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	eb18 0303 	adds.w	r3, r8, r3
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	462b      	mov	r3, r5
 80019cc:	eb49 0303 	adc.w	r3, r9, r3
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019de:	4629      	mov	r1, r5
 80019e0:	024b      	lsls	r3, r1, #9
 80019e2:	4621      	mov	r1, r4
 80019e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019e8:	4621      	mov	r1, r4
 80019ea:	024a      	lsls	r2, r1, #9
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f2:	2200      	movs	r2, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019fc:	f7fe fbe4 	bl	80001c8 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a08:	e058      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	4611      	mov	r1, r2
 8001a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a1a:	623b      	str	r3, [r7, #32]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a24:	4642      	mov	r2, r8
 8001a26:	464b      	mov	r3, r9
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	0159      	lsls	r1, r3, #5
 8001a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a36:	0150      	lsls	r0, r2, #5
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4641      	mov	r1, r8
 8001a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a42:	4649      	mov	r1, r9
 8001a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a60:	eb63 050b 	sbc.w	r5, r3, fp
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	00eb      	lsls	r3, r5, #3
 8001a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a72:	00e2      	lsls	r2, r4, #3
 8001a74:	4614      	mov	r4, r2
 8001a76:	461d      	mov	r5, r3
 8001a78:	4643      	mov	r3, r8
 8001a7a:	18e3      	adds	r3, r4, r3
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	464b      	mov	r3, r9
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a92:	4629      	mov	r1, r5
 8001a94:	028b      	lsls	r3, r1, #10
 8001a96:	4621      	mov	r1, r4
 8001a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	028a      	lsls	r2, r1, #10
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	61fa      	str	r2, [r7, #28]
 8001aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab0:	f7fe fb8a 	bl	80001c8 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3750      	adds	r7, #80	; 0x50
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b14:	f7ff fff0 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0a9b      	lsrs	r3, r3, #10
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	08002ad0 	.word	0x08002ad0

08001b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b3c:	f7ff ffdc 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0b5b      	lsrs	r3, r3, #13
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4903      	ldr	r1, [pc, #12]	; (8001b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	08002ad0 	.word	0x08002ad0

08001b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e03f      	b.n	8001bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fe82 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2224      	movs	r2, #36	; 0x24
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fcdf 	bl	8002568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	4613      	mov	r3, r2
 8001c06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d11d      	bne.n	8001c50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_UART_Receive_IT+0x26>
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e016      	b.n	8001c52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Receive_IT+0x38>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e00f      	b.n	8001c52 <HAL_UART_Receive_IT+0x58>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fab6 	bl	80021b8 <UART_Start_Receive_IT>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	e000      	b.n	8001c52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b0ba      	sub	sp, #232	; 0xe8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10f      	bne.n	8001cc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_UART_IRQHandler+0x66>
 8001cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fb99 	bl	80023f2 <UART_Receive_IT>
      return;
 8001cc0:	e256      	b.n	8002170 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80de 	beq.w	8001e88 <HAL_UART_IRQHandler+0x22c>
 8001ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d106      	bne.n	8001ce6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80d1 	beq.w	8001e88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_UART_IRQHandler+0xae>
 8001cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_UART_IRQHandler+0xd2>
 8001d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_UART_IRQHandler+0xf6>
 8001d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f043 0204 	orr.w	r2, r3, #4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d011      	beq.n	8001d82 <HAL_UART_IRQHandler+0x126>
 8001d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f043 0208 	orr.w	r2, r3, #8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 81ed 	beq.w	8002166 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_UART_IRQHandler+0x14e>
 8001d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fb24 	bl	80023f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db4:	2b40      	cmp	r3, #64	; 0x40
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <HAL_UART_IRQHandler+0x17a>
 8001dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04f      	beq.n	8001e76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa2c 	bl	8002234 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b40      	cmp	r3, #64	; 0x40
 8001de8:	d141      	bne.n	8001e6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3314      	adds	r3, #20
 8001df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001df8:	e853 3f00 	ldrex	r3, [r3]
 8001dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3314      	adds	r3, #20
 8001e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001e26:	e841 2300 	strex	r3, r2, [r1]
 8001e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1d9      	bne.n	8001dea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d013      	beq.n	8001e66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	4a7d      	ldr	r2, [pc, #500]	; (8002038 <HAL_UART_IRQHandler+0x3dc>)
 8001e44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f817 	bl	8000e7e <HAL_DMA_Abort_IT>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d016      	beq.n	8001e84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e60:	4610      	mov	r0, r2
 8001e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e64:	e00e      	b.n	8001e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f990 	bl	800218c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e6c:	e00a      	b.n	8001e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f98c 	bl	800218c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e74:	e006      	b.n	8001e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f988 	bl	800218c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001e82:	e170      	b.n	8002166 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e84:	bf00      	nop
    return;
 8001e86:	e16e      	b.n	8002166 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	f040 814a 	bne.w	8002126 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8143 	beq.w	8002126 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 813c 	beq.w	8002126 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ece:	2b40      	cmp	r3, #64	; 0x40
 8001ed0:	f040 80b4 	bne.w	800203c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001ee0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8140 	beq.w	800216a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	f080 8139 	bcs.w	800216a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001efe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0a:	f000 8088 	beq.w	800201e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	330c      	adds	r3, #12
 8001f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f1c:	e853 3f00 	ldrex	r3, [r3]
 8001f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	330c      	adds	r3, #12
 8001f36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f4a:	e841 2300 	strex	r3, r2, [r1]
 8001f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1d9      	bne.n	8001f0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3314      	adds	r3, #20
 8001f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f64:	e853 3f00 	ldrex	r3, [r3]
 8001f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3314      	adds	r3, #20
 8001f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f8a:	e841 2300 	strex	r3, r2, [r1]
 8001f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1e1      	bne.n	8001f5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3314      	adds	r3, #20
 8001f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fa0:	e853 3f00 	ldrex	r3, [r3]
 8001fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3314      	adds	r3, #20
 8001fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fc2:	e841 2300 	strex	r3, r2, [r1]
 8001fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1e3      	bne.n	8001f96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe6:	e853 3f00 	ldrex	r3, [r3]
 8001fea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fee:	f023 0310 	bic.w	r3, r3, #16
 8001ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002000:	65ba      	str	r2, [r7, #88]	; 0x58
 8002002:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002008:	e841 2300 	strex	r3, r2, [r1]
 800200c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e3      	bne.n	8001fdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fec0 	bl	8000d9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002026:	b29b      	uxth	r3, r3
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	b29b      	uxth	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8b6 	bl	80021a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002034:	e099      	b.n	800216a <HAL_UART_IRQHandler+0x50e>
 8002036:	bf00      	nop
 8002038:	080022fb 	.word	0x080022fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002044:	b29b      	uxth	r3, r3
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 808b 	beq.w	800216e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8086 	beq.w	800216e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	330c      	adds	r3, #12
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206c:	e853 3f00 	ldrex	r3, [r3]
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	330c      	adds	r3, #12
 8002082:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002086:	647a      	str	r2, [r7, #68]	; 0x44
 8002088:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800208c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800208e:	e841 2300 	strex	r3, r2, [r1]
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1e3      	bne.n	8002062 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3314      	adds	r3, #20
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	e853 3f00 	ldrex	r3, [r3]
 80020a8:	623b      	str	r3, [r7, #32]
   return(result);
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3314      	adds	r3, #20
 80020ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80020be:	633a      	str	r2, [r7, #48]	; 0x30
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c6:	e841 2300 	strex	r3, r2, [r1]
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e3      	bne.n	800209a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	330c      	adds	r3, #12
 80020e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	e853 3f00 	ldrex	r3, [r3]
 80020ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0310 	bic.w	r3, r3, #16
 80020f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	330c      	adds	r3, #12
 8002100:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002104:	61fa      	str	r2, [r7, #28]
 8002106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002108:	69b9      	ldr	r1, [r7, #24]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	e841 2300 	strex	r3, r2, [r1]
 8002110:	617b      	str	r3, [r7, #20]
   return(result);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e3      	bne.n	80020e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800211c:	4619      	mov	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f83e 	bl	80021a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002124:	e023      	b.n	800216e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_UART_IRQHandler+0x4ea>
 8002132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8ef 	bl	8002322 <UART_Transmit_IT>
    return;
 8002144:	e014      	b.n	8002170 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00e      	beq.n	8002170 <HAL_UART_IRQHandler+0x514>
 8002152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f92f 	bl	80023c2 <UART_EndTransmit_IT>
    return;
 8002164:	e004      	b.n	8002170 <HAL_UART_IRQHandler+0x514>
    return;
 8002166:	bf00      	nop
 8002168:	e002      	b.n	8002170 <HAL_UART_IRQHandler+0x514>
      return;
 800216a:	bf00      	nop
 800216c:	e000      	b.n	8002170 <HAL_UART_IRQHandler+0x514>
      return;
 800216e:	bf00      	nop
  }
}
 8002170:	37e8      	adds	r7, #232	; 0xe8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop

08002178 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2222      	movs	r2, #34	; 0x22
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002204:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0220 	orr.w	r2, r2, #32
 8002224:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002234:	b480      	push	{r7}
 8002236:	b095      	sub	sp, #84	; 0x54
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002246:	e853 3f00 	ldrex	r3, [r3]
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	330c      	adds	r3, #12
 800225a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800225c:	643a      	str	r2, [r7, #64]	; 0x40
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002264:	e841 2300 	strex	r3, r2, [r1]
 8002268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e5      	bne.n	800223c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3314      	adds	r3, #20
 8002276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	e853 3f00 	ldrex	r3, [r3]
 800227e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	64bb      	str	r3, [r7, #72]	; 0x48
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3314      	adds	r3, #20
 800228e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002298:	e841 2300 	strex	r3, r2, [r1]
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e5      	bne.n	8002270 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d119      	bne.n	80022e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	e853 3f00 	ldrex	r3, [r3]
 80022ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f023 0310 	bic.w	r3, r3, #16
 80022c2:	647b      	str	r3, [r7, #68]	; 0x44
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	330c      	adds	r3, #12
 80022ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022cc:	61ba      	str	r2, [r7, #24]
 80022ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d0:	6979      	ldr	r1, [r7, #20]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	e841 2300 	strex	r3, r2, [r1]
 80022d8:	613b      	str	r3, [r7, #16]
   return(result);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e5      	bne.n	80022ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022ee:	bf00      	nop
 80022f0:	3754      	adds	r7, #84	; 0x54
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff ff39 	bl	800218c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b21      	cmp	r3, #33	; 0x21
 8002334:	d13e      	bne.n	80023b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233e:	d114      	bne.n	800236a <UART_Transmit_IT+0x48>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d110      	bne.n	800236a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	1c9a      	adds	r2, r3, #2
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	e008      	b.n	800237c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	1c59      	adds	r1, r3, #1
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6211      	str	r1, [r2, #32]
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29b      	uxth	r3, r3
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4619      	mov	r1, r3
 800238a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10f      	bne.n	80023b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff fec8 	bl	8002178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b08c      	sub	sp, #48	; 0x30
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b22      	cmp	r3, #34	; 0x22
 8002404:	f040 80ab 	bne.w	800255e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002410:	d117      	bne.n	8002442 <UART_Receive_IT+0x50>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d113      	bne.n	8002442 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800241a:	2300      	movs	r3, #0
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002430:	b29a      	uxth	r2, r3
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	1c9a      	adds	r2, r3, #2
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
 8002440:	e026      	b.n	8002490 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002454:	d007      	beq.n	8002466 <UART_Receive_IT+0x74>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <UART_Receive_IT+0x82>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e008      	b.n	8002486 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002480:	b2da      	uxtb	r2, r3
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29b      	uxth	r3, r3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4619      	mov	r1, r3
 800249e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d15a      	bne.n	800255a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0220 	bic.w	r2, r2, #32
 80024b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d135      	bne.n	8002550 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	e853 3f00 	ldrex	r3, [r3]
 80024f8:	613b      	str	r3, [r7, #16]
   return(result);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f023 0310 	bic.w	r3, r3, #16
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	330c      	adds	r3, #12
 8002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250a:	623a      	str	r2, [r7, #32]
 800250c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250e:	69f9      	ldr	r1, [r7, #28]
 8002510:	6a3a      	ldr	r2, [r7, #32]
 8002512:	e841 2300 	strex	r3, r2, [r1]
 8002516:	61bb      	str	r3, [r7, #24]
   return(result);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1e5      	bne.n	80024ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b10      	cmp	r3, #16
 800252a:	d10a      	bne.n	8002542 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff fe29 	bl	80021a0 <HAL_UARTEx_RxEventCallback>
 800254e:	e002      	b.n	8002556 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7fe f823 	bl	800059c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e002      	b.n	8002560 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800255e:	2302      	movs	r3, #2
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	3730      	adds	r7, #48	; 0x30
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256c:	b0c0      	sub	sp, #256	; 0x100
 800256e:	af00      	add	r7, sp, #0
 8002570:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	ea40 0301 	orr.w	r3, r0, r1
 8002590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025c0:	f021 010c 	bic.w	r1, r1, #12
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025ce:	430b      	orrs	r3, r1
 80025d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e2:	6999      	ldr	r1, [r3, #24]
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	ea40 0301 	orr.w	r3, r0, r1
 80025ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b8f      	ldr	r3, [pc, #572]	; (8002834 <UART_SetConfig+0x2cc>)
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d005      	beq.n	8002608 <UART_SetConfig+0xa0>
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b8d      	ldr	r3, [pc, #564]	; (8002838 <UART_SetConfig+0x2d0>)
 8002604:	429a      	cmp	r2, r3
 8002606:	d104      	bne.n	8002612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002608:	f7ff fa96 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
 800260c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002610:	e003      	b.n	800261a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002612:	f7ff fa7d 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002616:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002624:	f040 810c 	bne.w	8002840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800262c:	2200      	movs	r2, #0
 800262e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002632:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800263a:	4622      	mov	r2, r4
 800263c:	462b      	mov	r3, r5
 800263e:	1891      	adds	r1, r2, r2
 8002640:	65b9      	str	r1, [r7, #88]	; 0x58
 8002642:	415b      	adcs	r3, r3
 8002644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800264a:	4621      	mov	r1, r4
 800264c:	eb12 0801 	adds.w	r8, r2, r1
 8002650:	4629      	mov	r1, r5
 8002652:	eb43 0901 	adc.w	r9, r3, r1
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800266a:	4690      	mov	r8, r2
 800266c:	4699      	mov	r9, r3
 800266e:	4623      	mov	r3, r4
 8002670:	eb18 0303 	adds.w	r3, r8, r3
 8002674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002678:	462b      	mov	r3, r5
 800267a:	eb49 0303 	adc.w	r3, r9, r3
 800267e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800268e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002696:	460b      	mov	r3, r1
 8002698:	18db      	adds	r3, r3, r3
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
 800269c:	4613      	mov	r3, r2
 800269e:	eb42 0303 	adc.w	r3, r2, r3
 80026a2:	657b      	str	r3, [r7, #84]	; 0x54
 80026a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026ac:	f7fd fd8c 	bl	80001c8 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4b61      	ldr	r3, [pc, #388]	; (800283c <UART_SetConfig+0x2d4>)
 80026b6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	011c      	lsls	r4, r3, #4
 80026be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026c2:	2200      	movs	r2, #0
 80026c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026d0:	4642      	mov	r2, r8
 80026d2:	464b      	mov	r3, r9
 80026d4:	1891      	adds	r1, r2, r2
 80026d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80026d8:	415b      	adcs	r3, r3
 80026da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026e0:	4641      	mov	r1, r8
 80026e2:	eb12 0a01 	adds.w	sl, r2, r1
 80026e6:	4649      	mov	r1, r9
 80026e8:	eb43 0b01 	adc.w	fp, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002700:	4692      	mov	sl, r2
 8002702:	469b      	mov	fp, r3
 8002704:	4643      	mov	r3, r8
 8002706:	eb1a 0303 	adds.w	r3, sl, r3
 800270a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800270e:	464b      	mov	r3, r9
 8002710:	eb4b 0303 	adc.w	r3, fp, r3
 8002714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002724:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800272c:	460b      	mov	r3, r1
 800272e:	18db      	adds	r3, r3, r3
 8002730:	643b      	str	r3, [r7, #64]	; 0x40
 8002732:	4613      	mov	r3, r2
 8002734:	eb42 0303 	adc.w	r3, r2, r3
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
 800273a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800273e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002742:	f7fd fd41 	bl	80001c8 <__aeabi_uldivmod>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4611      	mov	r1, r2
 800274c:	4b3b      	ldr	r3, [pc, #236]	; (800283c <UART_SetConfig+0x2d4>)
 800274e:	fba3 2301 	umull	r2, r3, r3, r1
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2264      	movs	r2, #100	; 0x64
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	1acb      	subs	r3, r1, r3
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002762:	4b36      	ldr	r3, [pc, #216]	; (800283c <UART_SetConfig+0x2d4>)
 8002764:	fba3 2302 	umull	r2, r3, r3, r2
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002770:	441c      	add	r4, r3
 8002772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002776:	2200      	movs	r2, #0
 8002778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800277c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002784:	4642      	mov	r2, r8
 8002786:	464b      	mov	r3, r9
 8002788:	1891      	adds	r1, r2, r2
 800278a:	63b9      	str	r1, [r7, #56]	; 0x38
 800278c:	415b      	adcs	r3, r3
 800278e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002794:	4641      	mov	r1, r8
 8002796:	1851      	adds	r1, r2, r1
 8002798:	6339      	str	r1, [r7, #48]	; 0x30
 800279a:	4649      	mov	r1, r9
 800279c:	414b      	adcs	r3, r1
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027ac:	4659      	mov	r1, fp
 80027ae:	00cb      	lsls	r3, r1, #3
 80027b0:	4651      	mov	r1, sl
 80027b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b6:	4651      	mov	r1, sl
 80027b8:	00ca      	lsls	r2, r1, #3
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	4642      	mov	r2, r8
 80027c2:	189b      	adds	r3, r3, r2
 80027c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027c8:	464b      	mov	r3, r9
 80027ca:	460a      	mov	r2, r1
 80027cc:	eb42 0303 	adc.w	r3, r2, r3
 80027d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027e8:	460b      	mov	r3, r1
 80027ea:	18db      	adds	r3, r3, r3
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ee:	4613      	mov	r3, r2
 80027f0:	eb42 0303 	adc.w	r3, r2, r3
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027fe:	f7fd fce3 	bl	80001c8 <__aeabi_uldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <UART_SetConfig+0x2d4>)
 8002808:	fba3 1302 	umull	r1, r3, r3, r2
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	2164      	movs	r1, #100	; 0x64
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	3332      	adds	r3, #50	; 0x32
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <UART_SetConfig+0x2d4>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	f003 0207 	and.w	r2, r3, #7
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4422      	add	r2, r4
 800282e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002830:	e105      	b.n	8002a3e <UART_SetConfig+0x4d6>
 8002832:	bf00      	nop
 8002834:	40011000 	.word	0x40011000
 8002838:	40011400 	.word	0x40011400
 800283c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002844:	2200      	movs	r2, #0
 8002846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800284a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800284e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002852:	4642      	mov	r2, r8
 8002854:	464b      	mov	r3, r9
 8002856:	1891      	adds	r1, r2, r2
 8002858:	6239      	str	r1, [r7, #32]
 800285a:	415b      	adcs	r3, r3
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002862:	4641      	mov	r1, r8
 8002864:	1854      	adds	r4, r2, r1
 8002866:	4649      	mov	r1, r9
 8002868:	eb43 0501 	adc.w	r5, r3, r1
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	00eb      	lsls	r3, r5, #3
 8002876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287a:	00e2      	lsls	r2, r4, #3
 800287c:	4614      	mov	r4, r2
 800287e:	461d      	mov	r5, r3
 8002880:	4643      	mov	r3, r8
 8002882:	18e3      	adds	r3, r4, r3
 8002884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002888:	464b      	mov	r3, r9
 800288a:	eb45 0303 	adc.w	r3, r5, r3
 800288e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800289e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028ae:	4629      	mov	r1, r5
 80028b0:	008b      	lsls	r3, r1, #2
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028b8:	4621      	mov	r1, r4
 80028ba:	008a      	lsls	r2, r1, #2
 80028bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028c0:	f7fd fc82 	bl	80001c8 <__aeabi_uldivmod>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4b60      	ldr	r3, [pc, #384]	; (8002a4c <UART_SetConfig+0x4e4>)
 80028ca:	fba3 2302 	umull	r2, r3, r3, r2
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	011c      	lsls	r4, r3, #4
 80028d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028e4:	4642      	mov	r2, r8
 80028e6:	464b      	mov	r3, r9
 80028e8:	1891      	adds	r1, r2, r2
 80028ea:	61b9      	str	r1, [r7, #24]
 80028ec:	415b      	adcs	r3, r3
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f4:	4641      	mov	r1, r8
 80028f6:	1851      	adds	r1, r2, r1
 80028f8:	6139      	str	r1, [r7, #16]
 80028fa:	4649      	mov	r1, r9
 80028fc:	414b      	adcs	r3, r1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800290c:	4659      	mov	r1, fp
 800290e:	00cb      	lsls	r3, r1, #3
 8002910:	4651      	mov	r1, sl
 8002912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002916:	4651      	mov	r1, sl
 8002918:	00ca      	lsls	r2, r1, #3
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	4603      	mov	r3, r0
 8002920:	4642      	mov	r2, r8
 8002922:	189b      	adds	r3, r3, r2
 8002924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002928:	464b      	mov	r3, r9
 800292a:	460a      	mov	r2, r1
 800292c:	eb42 0303 	adc.w	r3, r2, r3
 8002930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	67bb      	str	r3, [r7, #120]	; 0x78
 800293e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800294c:	4649      	mov	r1, r9
 800294e:	008b      	lsls	r3, r1, #2
 8002950:	4641      	mov	r1, r8
 8002952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002956:	4641      	mov	r1, r8
 8002958:	008a      	lsls	r2, r1, #2
 800295a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800295e:	f7fd fc33 	bl	80001c8 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <UART_SetConfig+0x4e4>)
 8002968:	fba3 1302 	umull	r1, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	2164      	movs	r1, #100	; 0x64
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	3332      	adds	r3, #50	; 0x32
 800297a:	4a34      	ldr	r2, [pc, #208]	; (8002a4c <UART_SetConfig+0x4e4>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002986:	441c      	add	r4, r3
 8002988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298c:	2200      	movs	r2, #0
 800298e:	673b      	str	r3, [r7, #112]	; 0x70
 8002990:	677a      	str	r2, [r7, #116]	; 0x74
 8002992:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002996:	4642      	mov	r2, r8
 8002998:	464b      	mov	r3, r9
 800299a:	1891      	adds	r1, r2, r2
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	415b      	adcs	r3, r3
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a6:	4641      	mov	r1, r8
 80029a8:	1851      	adds	r1, r2, r1
 80029aa:	6039      	str	r1, [r7, #0]
 80029ac:	4649      	mov	r1, r9
 80029ae:	414b      	adcs	r3, r1
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029be:	4659      	mov	r1, fp
 80029c0:	00cb      	lsls	r3, r1, #3
 80029c2:	4651      	mov	r1, sl
 80029c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029c8:	4651      	mov	r1, sl
 80029ca:	00ca      	lsls	r2, r1, #3
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	4603      	mov	r3, r0
 80029d2:	4642      	mov	r2, r8
 80029d4:	189b      	adds	r3, r3, r2
 80029d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80029d8:	464b      	mov	r3, r9
 80029da:	460a      	mov	r2, r1
 80029dc:	eb42 0303 	adc.w	r3, r2, r3
 80029e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	663b      	str	r3, [r7, #96]	; 0x60
 80029ec:	667a      	str	r2, [r7, #100]	; 0x64
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029fa:	4649      	mov	r1, r9
 80029fc:	008b      	lsls	r3, r1, #2
 80029fe:	4641      	mov	r1, r8
 8002a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a04:	4641      	mov	r1, r8
 8002a06:	008a      	lsls	r2, r1, #2
 8002a08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a0c:	f7fd fbdc 	bl	80001c8 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <UART_SetConfig+0x4e4>)
 8002a16:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2164      	movs	r1, #100	; 0x64
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	3332      	adds	r3, #50	; 0x32
 8002a28:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <UART_SetConfig+0x4e4>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4422      	add	r2, r4
 8002a3c:	609a      	str	r2, [r3, #8]
}
 8002a3e:	bf00      	nop
 8002a40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4a:	bf00      	nop
 8002a4c:	51eb851f 	.word	0x51eb851f

08002a50 <__libc_init_array>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	4d0d      	ldr	r5, [pc, #52]	; (8002a88 <__libc_init_array+0x38>)
 8002a54:	4c0d      	ldr	r4, [pc, #52]	; (8002a8c <__libc_init_array+0x3c>)
 8002a56:	1b64      	subs	r4, r4, r5
 8002a58:	10a4      	asrs	r4, r4, #2
 8002a5a:	2600      	movs	r6, #0
 8002a5c:	42a6      	cmp	r6, r4
 8002a5e:	d109      	bne.n	8002a74 <__libc_init_array+0x24>
 8002a60:	4d0b      	ldr	r5, [pc, #44]	; (8002a90 <__libc_init_array+0x40>)
 8002a62:	4c0c      	ldr	r4, [pc, #48]	; (8002a94 <__libc_init_array+0x44>)
 8002a64:	f000 f820 	bl	8002aa8 <_init>
 8002a68:	1b64      	subs	r4, r4, r5
 8002a6a:	10a4      	asrs	r4, r4, #2
 8002a6c:	2600      	movs	r6, #0
 8002a6e:	42a6      	cmp	r6, r4
 8002a70:	d105      	bne.n	8002a7e <__libc_init_array+0x2e>
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
 8002a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a78:	4798      	blx	r3
 8002a7a:	3601      	adds	r6, #1
 8002a7c:	e7ee      	b.n	8002a5c <__libc_init_array+0xc>
 8002a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a82:	4798      	blx	r3
 8002a84:	3601      	adds	r6, #1
 8002a86:	e7f2      	b.n	8002a6e <__libc_init_array+0x1e>
 8002a88:	08002ae0 	.word	0x08002ae0
 8002a8c:	08002ae0 	.word	0x08002ae0
 8002a90:	08002ae0 	.word	0x08002ae0
 8002a94:	08002ae4 	.word	0x08002ae4

08002a98 <memset>:
 8002a98:	4402      	add	r2, r0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d100      	bne.n	8002aa2 <memset+0xa>
 8002aa0:	4770      	bx	lr
 8002aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8002aa6:	e7f9      	b.n	8002a9c <memset+0x4>

08002aa8 <_init>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr

08002ab4 <_fini>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr
